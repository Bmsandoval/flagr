// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: protos/flagr.proto

package pbs

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ReleaseFlagClient is the client API for ReleaseFlag service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReleaseFlagClient interface {
	CreateReleaseFlag(ctx context.Context, in *CreateReleaseFlagRequest, opts ...grpc.CallOption) (*CreateReleaseFlagResponse, error)
}

type releaseFlagClient struct {
	cc grpc.ClientConnInterface
}

func NewReleaseFlagClient(cc grpc.ClientConnInterface) ReleaseFlagClient {
	return &releaseFlagClient{cc}
}

func (c *releaseFlagClient) CreateReleaseFlag(ctx context.Context, in *CreateReleaseFlagRequest, opts ...grpc.CallOption) (*CreateReleaseFlagResponse, error) {
	out := new(CreateReleaseFlagResponse)
	err := c.cc.Invoke(ctx, "/pbs.ReleaseFlag/CreateReleaseFlag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReleaseFlagServer is the server API for ReleaseFlag service.
// All implementations must embed UnimplementedReleaseFlagServer
// for forward compatibility
type ReleaseFlagServer interface {
	CreateReleaseFlag(context.Context, *CreateReleaseFlagRequest) (*CreateReleaseFlagResponse, error)
	mustEmbedUnimplementedReleaseFlagServer()
}

// UnimplementedReleaseFlagServer must be embedded to have forward compatible implementations.
type UnimplementedReleaseFlagServer struct {
}

func (UnimplementedReleaseFlagServer) CreateReleaseFlag(context.Context, *CreateReleaseFlagRequest) (*CreateReleaseFlagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateReleaseFlag not implemented")
}
func (UnimplementedReleaseFlagServer) mustEmbedUnimplementedReleaseFlagServer() {}

// UnsafeReleaseFlagServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReleaseFlagServer will
// result in compilation errors.
type UnsafeReleaseFlagServer interface {
	mustEmbedUnimplementedReleaseFlagServer()
}

func RegisterReleaseFlagServer(s grpc.ServiceRegistrar, srv ReleaseFlagServer) {
	s.RegisterService(&ReleaseFlag_ServiceDesc, srv)
}

func _ReleaseFlag_CreateReleaseFlag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReleaseFlagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReleaseFlagServer).CreateReleaseFlag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbs.ReleaseFlag/CreateReleaseFlag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReleaseFlagServer).CreateReleaseFlag(ctx, req.(*CreateReleaseFlagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ReleaseFlag_ServiceDesc is the grpc.ServiceDesc for ReleaseFlag service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReleaseFlag_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pbs.ReleaseFlag",
	HandlerType: (*ReleaseFlagServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateReleaseFlag",
			Handler:    _ReleaseFlag_CreateReleaseFlag_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/flagr.proto",
}
